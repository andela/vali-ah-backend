import { config } from 'dotenv';
import passport from 'passport';
import { Strategy } from 'passport-twitter';
import axios from 'axios';
import { OAuth2Client } from 'google-auth-library';

import { ApplicationError } from '../helpers/errors';
import models from '../models';
import { generateAuthToken } from '../helpers/auth';

config();

const { Users } = models;

const {
  TWITTER_API_KEY,
  TWITTER_API_SECRET,
  FACEBOOK_APP_ID,
  FACEBOOK_APP_SECRET,
  GOOGLE_CLIENT_ID,
  REDIRECT_URL
} = process.env;

const twitterConfig = {
  consumerKey: TWITTER_API_KEY,
  consumerSecret: TWITTER_API_SECRET,
  callbackURL: `${REDIRECT_URL}`,
  includeEmail: true,
  profileFields: ['id', 'displayName', 'photos', 'email']
};

/**
 * Verify that User access token received was generated by our app and get user data from facebook
 *
 * @function
 *
 * @param {Object} request.body request body
 *
 * @returns {Object} User Details gotten from Facebook
 */
export const facebookAuth = async ({ accessToken }) => {
  const appAccessTokenURL = `https://graph.facebook.com/oauth/access_token?client_id=${FACEBOOK_APP_ID}&client_secret=${FACEBOOK_APP_SECRET}&grant_type=client_credentials`;

  const { data: appAccessDetails } = await axios.get(appAccessTokenURL);
  const { access_token: appAccessToken } = appAccessDetails;

  const verifyUserAccessTokenURl = `
    https://graph.facebook.com/debug_token?input_token=${accessToken}&access_token=${appAccessToken}`;

  const { data: verificationDetails } = await axios.get(verifyUserAccessTokenURl);
  const { is_valid: isValid, app_id: appId } = verificationDetails.data;

  if (FACEBOOK_APP_ID !== appId) {
    throw new ApplicationError(
      500,
      `Invalid app id: expected [${FACEBOOK_APP_ID}] but was [${appId}]`
    );
  }

  if (!isValid) {
    throw new ApplicationError(500, 'User access token is invalid');
  }

  const getUserDataURL = `https://graph.facebook.com/me?fields=id,first_name,last_name,email,picture&access_token=${accessToken}`;

  const { data: userData } = await axios.get(getUserDataURL);
  const { first_name: firstName, last_name: lastName, email } = userData;
  const { url: avatarUrl } = userData.picture.data;

  return {
    firstName,
    lastName,
    email,
    avatarUrl
  };
};

/**
 * Verify that User access token received was generated by our app and get user data from google
 *
 * @function
 *
 * @param {Object} request request body
 *
 * @returns {Object} User Details gotten from google
 */
export const googleAuth = async ({ accessToken }) => {
  const client = new OAuth2Client(GOOGLE_CLIENT_ID);

  const ticket = await client.verifyIdToken({
    idToken: accessToken,
    audience: GOOGLE_CLIENT_ID
  });
  const {
    given_name: firstName, family_name: lastName, picture, email
  } = ticket.getPayload();

  return {
    avatarUrl: picture,
    email,
    firstName,
    lastName
  };
};

/**
 * Function to create or find a user in the database
 *
 * @function
 *
 * @param {Object} request request object containing user details
 *
 * @returns {Object} response object
 */
export const createOrFindUser = async ({
  firstName,
  lastName,
  email,
  avatarUrl,
  userName = null
}) => {
  try {
    const [user, created] = await Users.findOrCreate({
      where: { email },
      defaults: {
        firstName,
        lastName,
        email,
        avatarUrl,
        userName,
        password: ''
      }
    });

    const { id, createdAt } = user;
    const token = generateAuthToken({ id });
    const userDetails = {
      id,
      firstName,
      lastName,
      email,
      avatarUrl,
      createdAt
    };

    const status = created ? 201 : 200;
    return { status, data: { user: userDetails, token } };
  } catch (error) {
    throw new ApplicationError(500, error);
  }
};

/**
 * Call Back that is called after redirect from twitter page where user gives consent
 *
 * @function
 *
 * @param {string} accessToken
 * @param {string} refreshToken
 * @param {Object} profile user profile returned from twitter
 * @param {Function} done
 *
 * @returns {Object} user details returned from twitter
 */
export const performCallback = (accessToken, refreshToken, profile, done) => {
  const {
    username, displayName, emails, photos
  } = profile;

  const [firstName, lastName] = displayName.split(' ');

  const user = {
    userName: username,
    firstName,
    lastName,
    email: emails[0].value,
    avatarUrl: photos[0].value
  };
  return done(null, user);
};

passport.use('twitter', new Strategy(twitterConfig, performCallback));
